{"ast":null,"code":"var _jsxFileName = \"/home/bigcubecat/Projects/musli/src/components/ColorPicker/Picker.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BUTTON_COLORS = [// Основанно на тесте Люшера\n'#f22f23', '#1e9773', '#004984', '#f2de00', '#231f21', '#99938f', '#d32481', '#c65223'];\n\nconst ColorButton = _ref => {\n  let {\n    color,\n    index,\n    onClick,\n    selected\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"buttonContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      style: {\n        backgroundColor: color\n      },\n      className: selected && 'selected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 10\n  }, this);\n};\n\n_c = ColorButton;\nexport default function Picker() {\n  _s();\n\n  const [colors, setColors] = React.useState(BUTTON_COLORS.map(_ => false));\n  const [countSelected, setCountSelected] = React.useState(0);\n\n  const setColor = index => {\n    console.log(index);\n\n    if (countSelected === 2) {\n      const newColors = BUTTON_COLORS.map((_, i) => {\n        return index === i;\n      });\n      setColors(newColors);\n      setCountSelected(1);\n      return;\n    }\n\n    let newCountSelected = 0;\n    const newColors = [];\n\n    for (let i in colors) {\n      if (index === i) {\n        newColors.push(!colors[i]);\n      } else {\n        newColors.push(colors[i]);\n      }\n\n      newCountSelected += newColors[i] ? 1 : 0;\n    }\n\n    setColors(newColors);\n    setCountSelected(newCountSelected);\n    console.log(newColors);\n    console.log(newCountSelected);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Picker\",\n    children: BUTTON_COLORS.map((color, i) => /*#__PURE__*/_jsxDEV(ColorButton, {\n      color: color,\n      index: i,\n      onClick: () => setColor(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 41\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Picker, \"KHw4BP+tGWHQq7c2n8sAyQ1vaaE=\");\n\n_c2 = Picker;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ColorButton\");\n$RefreshReg$(_c2, \"Picker\");","map":{"version":3,"names":["React","BUTTON_COLORS","ColorButton","color","index","onClick","selected","backgroundColor","Picker","colors","setColors","useState","map","_","countSelected","setCountSelected","setColor","console","log","newColors","i","newCountSelected","push"],"sources":["/home/bigcubecat/Projects/musli/src/components/ColorPicker/Picker.js"],"sourcesContent":["import React from \"react\";\n\nexport const BUTTON_COLORS = [  // Основанно на тесте Люшера\n  '#f22f23',\n  '#1e9773',\n  '#004984',\n  '#f2de00',\n  '#231f21',\n  '#99938f',\n  '#d32481',\n  '#c65223',\n];\n\nconst ColorButton = ({ color, index, onClick, selected }) => {\n  return <div className=\"buttonContainer\">\n    <button\n      onClick={onClick}\n      style={{ backgroundColor: color }}\n      className={(selected) && 'selected'}>\n    </button>\n  </div>\n}\n\nexport default function Picker() {\n  const [colors, setColors] = React.useState(BUTTON_COLORS.map(_ => false));\n  const [countSelected, setCountSelected] = React.useState(0);\n\n  const setColor = (index) => {\n    console.log(index)\n    if (countSelected === 2) {\n      const newColors = BUTTON_COLORS.map((_, i) => {\n        return index === i\n      })\n      setColors(newColors);\n      setCountSelected(1);\n      return;\n    }\n    let newCountSelected = 0;\n    const newColors = [];\n    for (let i in colors) {\n      if (index === i) {\n        newColors.push(!colors[i]);\n      } else {\n        newColors.push(colors[i]);\n      }\n      newCountSelected += (newColors[i]) ? 1 : 0\n    }\n    setColors(newColors);\n    setCountSelected(newCountSelected);\n    console.log(newColors)\n    console.log(newCountSelected)\n  }\n\n  return (\n    <div className=\"Picker\">\n      {\n        BUTTON_COLORS.map((color, i) => <ColorButton color={color} index={i} onClick={() => setColor(i)} />)\n      }\n    </div>\n  )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAG;AAC9B,SAD2B,EAE3B,SAF2B,EAG3B,SAH2B,EAI3B,SAJ2B,EAK3B,SAL2B,EAM3B,SAN2B,EAO3B,SAP2B,EAQ3B,SAR2B,CAAtB;;AAWP,MAAMC,WAAW,GAAG,QAAyC;EAAA,IAAxC;IAAEC,KAAF;IAASC,KAAT;IAAgBC,OAAhB;IAAyBC;EAAzB,CAAwC;EAC3D,oBAAO;IAAK,SAAS,EAAC,iBAAf;IAAA,uBACL;MACE,OAAO,EAAED,OADX;MAEE,KAAK,EAAE;QAAEE,eAAe,EAAEJ;MAAnB,CAFT;MAGE,SAAS,EAAGG,QAAD,IAAc;IAH3B;MAAA;MAAA;MAAA;IAAA;EADK;IAAA;IAAA;IAAA;EAAA,QAAP;AAOD,CARD;;KAAMJ,W;AAUN,eAAe,SAASM,MAAT,GAAkB;EAAA;;EAC/B,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,KAAK,CAACW,QAAN,CAAeV,aAAa,CAACW,GAAd,CAAkBC,CAAC,IAAI,KAAvB,CAAf,CAA5B;EACA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCf,KAAK,CAACW,QAAN,CAAe,CAAf,CAA1C;;EAEA,MAAMK,QAAQ,GAAIZ,KAAD,IAAW;IAC1Ba,OAAO,CAACC,GAAR,CAAYd,KAAZ;;IACA,IAAIU,aAAa,KAAK,CAAtB,EAAyB;MACvB,MAAMK,SAAS,GAAGlB,aAAa,CAACW,GAAd,CAAkB,CAACC,CAAD,EAAIO,CAAJ,KAAU;QAC5C,OAAOhB,KAAK,KAAKgB,CAAjB;MACD,CAFiB,CAAlB;MAGAV,SAAS,CAACS,SAAD,CAAT;MACAJ,gBAAgB,CAAC,CAAD,CAAhB;MACA;IACD;;IACD,IAAIM,gBAAgB,GAAG,CAAvB;IACA,MAAMF,SAAS,GAAG,EAAlB;;IACA,KAAK,IAAIC,CAAT,IAAcX,MAAd,EAAsB;MACpB,IAAIL,KAAK,KAAKgB,CAAd,EAAiB;QACfD,SAAS,CAACG,IAAV,CAAe,CAACb,MAAM,CAACW,CAAD,CAAtB;MACD,CAFD,MAEO;QACLD,SAAS,CAACG,IAAV,CAAeb,MAAM,CAACW,CAAD,CAArB;MACD;;MACDC,gBAAgB,IAAKF,SAAS,CAACC,CAAD,CAAV,GAAiB,CAAjB,GAAqB,CAAzC;IACD;;IACDV,SAAS,CAACS,SAAD,CAAT;IACAJ,gBAAgB,CAACM,gBAAD,CAAhB;IACAJ,OAAO,CAACC,GAAR,CAAYC,SAAZ;IACAF,OAAO,CAACC,GAAR,CAAYG,gBAAZ;EACD,CAxBD;;EA0BA,oBACE;IAAK,SAAS,EAAC,QAAf;IAAA,UAEIpB,aAAa,CAACW,GAAd,CAAkB,CAACT,KAAD,EAAQiB,CAAR,kBAAc,QAAC,WAAD;MAAa,KAAK,EAAEjB,KAApB;MAA2B,KAAK,EAAEiB,CAAlC;MAAqC,OAAO,EAAE,MAAMJ,QAAQ,CAACI,CAAD;IAA5D;MAAA;MAAA;MAAA;IAAA,QAAhC;EAFJ;IAAA;IAAA;IAAA;EAAA,QADF;AAOD;;GArCuBZ,M;;MAAAA,M"},"metadata":{},"sourceType":"module"}